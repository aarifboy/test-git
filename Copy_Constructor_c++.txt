
#include <iostream>    //for cout
#include <fstream>     // for ofstream/ifstream
#include <string>     //for << and getline
#include <vector>   //for vectors
#include<list>  //for lists

class file_element
{
public:
	//int line_no;
	//std::string line;
	int *line_no;
	std::string *line;

public:
	file_element(){}//default constructor

	file_element(const file_element &p) //copy constructor
	{ 
		line_no = new int(*p.line_no); 
		line = new std::string(*p.line); 
	}

	void set_(std::string l, int n)
	{
		//line_no = n;
		//line = l;
		//(*this).line_no = n;
		//(*this).line = l;

		*line_no = n;
		*line =  l;
		//*(*this).line_no = n;
		//*(*this).line = l;
	}

	std::string get_line()
	{
		//return line;
		return *line;
	}

	int get_line_no()
	{
		//return line_no;
		return *line_no;
	}
};

int main(int argc, char *argv[])
{
	std::ifstream input_file;
	input_file.open("test.txt");

	std::ofstream output_file("test.txt.out");

	std::string line;

	std::list<file_element> elements,contents;

	for (int line_no = 1; std::getline(input_file, line); ++line_no)
	{
		file_element element;	
		//element.line = line;
		//element.line_no = line_no;
		element.line = new std::string(line);
		element.line_no = new int(line_no);

		file_element content = element;//copy
		//file_element content(element);//copy

		std::string s = line + "change";
		int i = line_no + 6;

		element.set_(s,i);
		//content.set_(s,i);

		elements.push_back(element);
		contents.push_back(content);
	}

	std::list<file_element>::iterator iter = elements.begin();
	for (; iter != elements.end(); ++iter)
	{
		std::cout << (*iter).get_line_no() << ": " << (*iter).get_line() << std::endl;
		output_file << (*iter).get_line_no() << ": " << (*iter).get_line() << std::endl;
	}

	std::list<file_element>::iterator it = contents.begin();
	for (; it != contents.end(); ++it)
	{
		std::cout << (*it).get_line_no() << ": " << (*it).get_line() << std::endl;
		output_file << (*it).get_line_no() << ": " << (*it).get_line() << std::endl;
	}

	if (input_file)
	{
		input_file.close();
		output_file.close();
	}
	std::cin.get();
	return 0;
}

