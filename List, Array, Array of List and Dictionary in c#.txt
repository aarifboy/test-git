

using System;
using System.Collections.Generic;//for string and list
using System.IO;//to use StreamReader
using System.Linq;//for Count
namespace lec1csharp
{
    class Program
    {
        public static List<int> PE(List<int> p)
        {
            int n = p.Count();
            List<int> y = new List<int>();
        //    List<int> x = new List<int>();
      //      List<int?> y = new List<int?>(n);
        //    List<int?> x = new List<int?>(n+1);
    //        int[] x = new int[n + 1];
            SortedDictionary<int, int> x = new SortedDictionary<int, int>();

     //       for (int i = 0; i <= n; i++) x.Add(null);
    //        for (int i = 1; i <= n; i++) y.Add(null);

            for (int i = 1; i <= n; i++){
                x[p[i - 1]] = i;//
         //       x.Add(p[i - 1], i);
            //    x.Add(p.IndexOf(i) + 1);//use for loop only

                Console.WriteLine("p[{0}] = {1}", i, p[i - 1]);
              //  Console.WriteLine("p[{0}] = {1}", (p.IndexOf(i) + 1),i);
            }
            Console.WriteLine();
            foreach(var i in x )
      //      for (int i = 1; i <= n; i++)
            {
              //  y.Add(p.IndexOf(x[i-1]) + 1);
                y.Add(x[i.Value]);
          //      y.Add(x[x[i]]);// if x is array/Dictionary and List y()
            //    y.Insert((i - 1), x[x[i]]);//if x array/Dictionary and List y()
           //     y[i - 1] = x[x[i] ];//if x is array/Dictionary and List y(n) 
           //     y[i - 1] = x[x[i]??0];//if List y(n)  and List x(n+1)
              
            }
            return y;    
       //     List<int> l = y.OfType<int>().ToList();
       //     return l;

        }
        static void Main()
        {
            //List<int> p = new List<int>(){4,3,5,1,2};// prints y = {1,3,5,4,2}
            //x = 1 = p(4) = p(p(1)) = p(p(y)) = > y = 1
            List<int> p = new List<int>() { 5, 2, 1, 3, 4 };// prints y = {4,2,5,1,3}
            // x = 1 = p(3) = p(p(4)) = p(p(y)) => y = 4
            List<int> result = new List<int>(PE(p));
            int n = result.Count();
            for (int i = 0; i < n; i++)
                Console.WriteLine(result[i]);
            Console.ReadLine();
        }
    }
}
