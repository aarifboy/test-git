
#include <iostream>    //for cout
#include <fstream>     // for ofstream/ifstream
#include <string>     //for << and getline
#include <vector>   //for vectors
#include<list>  //for lists
#include<algorithm>  //for find_if
#include <iterator> // for inserter

bool element_fullstop(const std::string &element)
{
	if (!(element == "."))
	{
		return false; //predicate is a function that returns a boolean value.
	}
	return true;
}

int main(int argc, char *argv[])
{
	std::ifstream input_file("test.txt");
	std::ofstream output_file("test.txt.out");

	//std::list<std::string> elements;
	//std::list<std::string> arrange;
	std::vector<std::string> elements;
	std::vector<std::string> arrange;

	std::string line;
	for (int line_no = 0; std::getline(input_file, line); ++line_no)
	{
		for (size_t i = 0; i < line.size(); i++)
		{
			elements.push_back(std::string(1, line[i]));			
		}
		//elements.push_back(line);
	}

	//std::list<std::string>::iterator iter = elements.begin();
	std::vector<std::string>::iterator iter = elements.begin();
	for (; iter != elements.end(); ++iter)
	{
		std::cout << (*iter);
		output_file << (*iter);
	}

	//std::list<std::string>::iterator stop = std::find_if(elements.begin(),
		//elements.end(), element_fullstop);
	std::vector<std::string>::iterator stop = std::find_if(elements.begin(),
		elements.end(), element_fullstop);

	if (stop == elements.end())
	{
		std::cout << "element . not found" << std::endl;
	}
	++stop;

	//arrange.splice(arrange.begin(), elements, elements.begin(), stop);

	//std::copy(elements.begin(), stop,
		//std::inserter(arrange, arrange.begin()));//works with erase
	//std::copy(elements.begin(), stop,std::back_inserter(arrange));//works with erase
	//arrange.assign(elements.begin(), stop);//works with erase
	arrange.insert(arrange.begin(), elements.begin(), stop);
	elements.erase(elements.begin(), stop);

	std::cout << std::endl;
	std::cout << "picked up data for arrange:" << std::endl;

	//std::list<std::string>::iterator it = arrange.begin();
	std::vector<std::string>::iterator it = arrange.begin();
	for (; it != arrange.end(); ++it)
	{
		std::cout << (*it);
		output_file << (*it);
	}

	if (input_file)
	{
		input_file.close();
		output_file.close();
	}
	std::cin.get();
	return 0;
}

