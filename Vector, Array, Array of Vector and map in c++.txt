
#include <iostream>
#include <vector>
#include <map>
#include <unordered_map>
#include<algorithm>// for find
#include <iterator> //for distance
using namespace std;

int IndexOf(vector<int> p, int i) {
	return distance(p.begin(), find(p.begin(), p.end(), i));
}

vector<int> PE(vector<int> p) {
	int n = p.size();
	vector< int> y;
//	vector<int>y(n);
	//vector<int> x;
//	vector<int> x(n+1);
//	int x[5+1];
	map<int,int> x;
	for (int i = 1; i <= n; i++) {
		x[p[i - 1]] = i;
	//	x.insert({ p[i - 1],i });
	//	x.push_back(IndexOf(p, i) + 1 );
		
		cout << "p[" << i << "] =" << p[i - 1] << endl;
	//	cout << "p[" <<  (IndexOf(p, i) + 1) << "] =" << i << endl;
	}
	cout << endl;
	for (auto i:x){
//	for (int i = 1; i <= n; i++) {
	//	y.push_back(IndexOf(p, x[i-1]) + 1);
		y.push_back(x[i.second]);
	//	y.push_back(x[x[i]]);//x array/map and vector y
		//y.insert(y.begin() + (i - 1), x[x[i]]);//if x array/map and vector y
	//	y[i - 1] = x[x[i]];//if vector y(n) and x array/vector x(n+1)/map x
	}
	return y;
}

int main()
{
	//vector <int> p = {4,3,5,1,2};// prints y = {1,3,5,4,2}
	//x = 1 = p(4) = p(p(1)) = p(p(y)) = > y = 1
	vector<int> p = { 5,2,1,3,4 };// prints y = {4,2,5,1,3}
	// x = 1 = p(3) = p(p(4)) = p(p(y)) => y = 4
								  
	vector<int> result = PE(p);
	int n = result.size();
	for (int i = 0; i < n; i++)
		cout << result[i] << endl;
	std::cin.get();
	return 0;
}
